{"ast":null,"code":"const MONAD_MAINNET_RPC = process.env.REACT_APP_MONAD_MAINNET_RPC || 'https://rpc.monad.xyz';\nconst MONAD_TESTNET_RPC = process.env.REACT_APP_MONAD_TESTNET_RPC || 'https://testnet-rpc.monad.xyz';\nconst MONAD_API_KEY = process.env.REACT_APP_MONAD_API_KEY;\n\n// Monad NFT API service\nexport const monadAPI = {\n  // Get Monad collections with pagination\n  async getCollections(limit = 20, offset = 0, network = 'mainnet') {\n    try {\n      var _data$result, _data$result2;\n      const rpcUrl = network === 'testnet' ? MONAD_TESTNET_RPC : MONAD_MAINNET_RPC;\n\n      // Simulate Monad NFT marketplace API call\n      const response = await fetch(`${rpcUrl}/api/v1/nft/collections`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${MONAD_API_KEY}`\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          method: 'monad_getNFTCollections',\n          params: {\n            limit,\n            offset,\n            network,\n            includeStats: true\n          },\n          id: 1\n        })\n      });\n      if (!response.ok) {\n        // Fallback to simulated Monad data\n        return this.getSimulatedMonadCollections(limit, offset, network);\n      }\n      const data = await response.json();\n      return {\n        collections: this.formatMonadCollections(((_data$result = data.result) === null || _data$result === void 0 ? void 0 : _data$result.collections) || []),\n        continuation: (_data$result2 = data.result) !== null && _data$result2 !== void 0 && _data$result2.hasMore ? `${offset + limit}` : null,\n        network\n      };\n    } catch (error) {\n      console.error('Monad API error:', error);\n      return this.getSimulatedMonadCollections(limit, offset, network);\n    }\n  },\n  // Search Monad collections\n  async searchCollections(query, limit = 20, offset = 0, network = 'mainnet') {\n    try {\n      var _data$result3, _data$result4;\n      const rpcUrl = network === 'testnet' ? MONAD_TESTNET_RPC : MONAD_MAINNET_RPC;\n      const response = await fetch(`${rpcUrl}/api/v1/nft/search`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${MONAD_API_KEY}`\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          method: 'monad_searchNFTCollections',\n          params: {\n            query,\n            limit,\n            offset,\n            network\n          },\n          id: 1\n        })\n      });\n      if (!response.ok) {\n        return this.searchSimulatedMonadCollections(query, limit, offset, network);\n      }\n      const data = await response.json();\n      return {\n        collections: this.formatMonadCollections(((_data$result3 = data.result) === null || _data$result3 === void 0 ? void 0 : _data$result3.collections) || []),\n        continuation: (_data$result4 = data.result) !== null && _data$result4 !== void 0 && _data$result4.hasMore ? `${offset + limit}` : null,\n        network\n      };\n    } catch (error) {\n      console.error('Monad search error:', error);\n      return this.searchSimulatedMonadCollections(query, limit, offset, network);\n    }\n  },\n  // Get trending Monad collections\n  async getTrendingCollections(period = '24h', limit = 20, offset = 0, network = 'mainnet') {\n    try {\n      var _data$result5, _data$result6;\n      const rpcUrl = network === 'testnet' ? MONAD_TESTNET_RPC : MONAD_MAINNET_RPC;\n      const response = await fetch(`${rpcUrl}/api/v1/nft/trending`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${MONAD_API_KEY}`\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          method: 'monad_getTrendingCollections',\n          params: {\n            period,\n            limit,\n            offset,\n            network\n          },\n          id: 1\n        })\n      });\n      if (!response.ok) {\n        return this.getSimulatedTrendingCollections(limit, offset, network);\n      }\n      const data = await response.json();\n      return {\n        collections: this.formatMonadCollections(((_data$result5 = data.result) === null || _data$result5 === void 0 ? void 0 : _data$result5.collections) || []),\n        continuation: (_data$result6 = data.result) !== null && _data$result6 !== void 0 && _data$result6.hasMore ? `${offset + limit}` : null,\n        network\n      };\n    } catch (error) {\n      console.error('Monad trending error:', error);\n      return this.getSimulatedTrendingCollections(limit, offset, network);\n    }\n  },\n  // Get Monad wallet portfolio\n  async getUserCollections(address, offset = 0, limit = 20, network = 'mainnet') {\n    try {\n      var _data$result7;\n      const rpcUrl = network === 'testnet' ? MONAD_TESTNET_RPC : MONAD_MAINNET_RPC;\n      const response = await fetch(`${rpcUrl}/api/v1/nft/portfolio`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${MONAD_API_KEY}`\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          method: 'monad_getWalletNFTs',\n          params: {\n            address,\n            limit,\n            offset,\n            network,\n            includeMetadata: true\n          },\n          id: 1\n        })\n      });\n      if (!response.ok) {\n        return this.getSimulatedPortfolio(address, network);\n      }\n      const data = await response.json();\n      return this.formatMonadPortfolio(((_data$result7 = data.result) === null || _data$result7 === void 0 ? void 0 : _data$result7.collections) || []);\n    } catch (error) {\n      console.error('Monad portfolio error:', error);\n      return this.getSimulatedPortfolio(address, network);\n    }\n  },\n  // Get MON token price\n  async getMonPrice() {\n    try {\n      var _data$monad;\n      // Simulate MON price API\n      const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=monad&vs_currencies=usd');\n      const data = await response.json();\n      return ((_data$monad = data.monad) === null || _data$monad === void 0 ? void 0 : _data$monad.usd) || this.getSimulatedMonPrice();\n    } catch (error) {\n      return this.getSimulatedMonPrice();\n    }\n  },\n  // Simulated Monad collections for development\n  getSimulatedMonadCollections(limit, offset, network) {\n    const baseCollections = [{\n      id: 'monad-genesis',\n      name: 'Monad Genesis',\n      symbol: 'MGEN',\n      contractAddress: '0x1234567890123456789012345678901234567890',\n      image: 'https://picsum.photos/id/1041/400/200',\n      floorPrice: 5500,\n      volume24h: 89000,\n      volume7d: 234000,\n      volumeAllTime: 1200000,\n      owners: 999,\n      totalSupply: 1000,\n      change24h: 31.5,\n      change7d: 45.2,\n      description: 'The original founders collection on Monad blockchain',\n      royalties: 500,\n      sales24h: 12,\n      sales7d: 45,\n      marketCap: 5500000,\n      verified: true,\n      network\n    }, {\n      id: 'monad-monks',\n      name: 'Monad Monks',\n      symbol: 'MONKS',\n      contractAddress: '0x2345678901234567890123456789012345678901',\n      image: 'https://picsum.photos/id/1011/400/200',\n      floorPrice: 2500,\n      volume24h: 45000,\n      volume7d: 156000,\n      volumeAllTime: 890000,\n      owners: 3247,\n      totalSupply: 5000,\n      change24h: 15.7,\n      change7d: 22.1,\n      description: 'Sacred guardians of the Monad blockchain ecosystem',\n      royalties: 500,\n      sales24h: 18,\n      sales7d: 67,\n      marketCap: 12500000,\n      verified: true,\n      network\n    }, {\n      id: 'monad-portals',\n      name: 'Monad Portals',\n      symbol: 'PORTALS',\n      contractAddress: '0x3456789012345678901234567890123456789012',\n      image: 'https://picsum.photos/id/1015/400/200',\n      floorPrice: 1800,\n      volume24h: 32000,\n      volume7d: 98000,\n      volumeAllTime: 567000,\n      owners: 2156,\n      totalSupply: 3333,\n      change24h: 8.3,\n      change7d: 12.7,\n      description: 'Interdimensional gateways powered by Monad speed',\n      royalties: 750,\n      sales24h: 22,\n      sales7d: 89,\n      marketCap: 5999400,\n      verified: true,\n      network\n    }, {\n      id: 'monad-crystals',\n      name: 'Monad Crystals',\n      symbol: 'CRYSTALS',\n      contractAddress: '0x4567890123456789012345678901234567890123',\n      image: 'https://picsum.photos/id/1025/400/200',\n      floorPrice: 950,\n      volume24h: 28500,\n      volume7d: 87000,\n      volumeAllTime: 445000,\n      owners: 4892,\n      totalSupply: 8888,\n      change24h: 22.1,\n      change7d: 18.9,\n      description: 'Energy cores that fuel the Monad metaverse',\n      royalties: 250,\n      sales24h: 30,\n      sales7d: 112,\n      marketCap: 8443600,\n      verified: true,\n      network\n    }, {\n      id: 'monad-mechs',\n      name: 'Monad Mechs',\n      symbol: 'MECHS',\n      contractAddress: '0x5678901234567890123456789012345678901234',\n      image: 'https://picsum.photos/id/180/400/200',\n      floorPrice: 3200,\n      volume24h: 67000,\n      volume7d: 189000,\n      volumeAllTime: 1100000,\n      owners: 1834,\n      totalSupply: 2500,\n      change24h: -3.2,\n      change7d: 5.8,\n      description: 'Elite battle machines defending Monad space',\n      royalties: 1000,\n      sales24h: 21,\n      sales7d: 59,\n      marketCap: 8000000,\n      verified: true,\n      network\n    }, {\n      id: 'monad-spirits',\n      name: 'Monad Spirits',\n      symbol: 'SPIRITS',\n      contractAddress: '0x6789012345678901234567890123456789012345',\n      image: 'https://picsum.photos/id/1027/400/200',\n      floorPrice: 750,\n      volume24h: 19800,\n      volume7d: 67000,\n      volumeAllTime: 334000,\n      owners: 6234,\n      totalSupply: 10000,\n      change24h: 12.8,\n      change7d: 9.4,\n      description: 'Ethereal beings native to the Monad dimension',\n      royalties: 300,\n      sales24h: 26,\n      sales7d: 89,\n      marketCap: 7500000,\n      verified: true,\n      network\n    }];\n\n    // Add time-based price fluctuations\n    const collections = baseCollections.map(collection => ({\n      ...collection,\n      floorPrice: this.addPriceFluctuation(collection.floorPrice),\n      volume24h: this.addVolumeFluctuation(collection.volume24h),\n      change24h: this.addChangeFluctuation(collection.change24h)\n    }));\n    const start = offset;\n    const end = offset + limit;\n    const paginatedCollections = collections.slice(start, end);\n    return {\n      collections: paginatedCollections,\n      continuation: end < collections.length ? `${end}` : null,\n      network\n    };\n  },\n  searchSimulatedMonadCollections(query, limit, offset, network) {\n    const allCollections = this.getSimulatedMonadCollections(100, 0, network).collections;\n    const filtered = allCollections.filter(collection => collection.name.toLowerCase().includes(query.toLowerCase()) || collection.symbol.toLowerCase().includes(query.toLowerCase()));\n    const start = offset;\n    const end = offset + limit;\n    const paginatedResults = filtered.slice(start, end);\n    return {\n      collections: paginatedResults,\n      continuation: end < filtered.length ? `${end}` : null,\n      network\n    };\n  },\n  getSimulatedTrendingCollections(limit, offset, network) {\n    const collections = this.getSimulatedMonadCollections(100, 0, network).collections;\n    // Sort by 24h volume for trending\n    const trending = collections.sort((a, b) => b.volume24h - a.volume24h);\n    const start = offset;\n    const end = offset + limit;\n    const paginatedTrending = trending.slice(start, end);\n    return {\n      collections: paginatedTrending,\n      continuation: end < trending.length ? `${end}` : null,\n      network\n    };\n  },\n  getSimulatedPortfolio(address, network) {\n    // Simulate user portfolio based on address\n    const collections = this.getSimulatedMonadCollections(6, 0, network).collections;\n    return collections.slice(0, 3).map(collection => ({\n      ...collection,\n      ownedCount: Math.floor(Math.random() * 5) + 1,\n      floorValue: collection.floorPrice,\n      totalValue: collection.floorPrice * (Math.floor(Math.random() * 5) + 1)\n    }));\n  },\n  getSimulatedMonPrice() {\n    const basePrice = 12.50;\n    const variation = Math.sin(Date.now() / 200000) * 2 + (Math.random() - 0.5) * 1;\n    return Math.max(basePrice + variation, 8);\n  },\n  addPriceFluctuation(basePrice) {\n    const variation = Math.sin(Date.now() / 100000) * 0.1 + (Math.random() - 0.5) * 0.05;\n    return Math.max(basePrice * (1 + variation), basePrice * 0.8);\n  },\n  addVolumeFluctuation(baseVolume) {\n    const variation = (Math.random() - 0.5) * 0.3;\n    return Math.max(baseVolume * (1 + variation), 0);\n  },\n  addChangeFluctuation(baseChange) {\n    const variation = (Math.random() - 0.5) * 10;\n    return baseChange + variation;\n  },\n  formatMonadCollections(collections) {\n    return collections;\n  },\n  formatMonadPortfolio(collections) {\n    return collections;\n  }\n};\n\n// Monad network utilities\nexport const monadNetworkAPI = {\n  async getNetworkStats(network = 'mainnet') {\n    try {\n      const rpcUrl = network === 'testnet' ? MONAD_TESTNET_RPC : MONAD_MAINNET_RPC;\n      const response = await fetch(rpcUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          method: 'eth_blockNumber',\n          params: [],\n          id: 1\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        const blockNumber = parseInt(data.result, 16);\n        return {\n          blockHeight: blockNumber,\n          tps: 10000 + Math.floor(Math.random() * 2000),\n          gasPrice: 0.001,\n          activeValidators: network === 'testnet' ? 50 : 100,\n          network\n        };\n      }\n    } catch (error) {\n      console.error('Monad network error:', error);\n    }\n\n    // Fallback simulated stats\n    return {\n      blockHeight: 1234567 + Math.floor(Date.now() / 1000),\n      tps: 10000 + Math.floor(Math.random() * 2000),\n      gasPrice: 0.001,\n      activeValidators: network === 'testnet' ? 50 : 100,\n      network\n    };\n  }\n};","map":{"version":3,"names":["MONAD_MAINNET_RPC","process","env","REACT_APP_MONAD_MAINNET_RPC","MONAD_TESTNET_RPC","REACT_APP_MONAD_TESTNET_RPC","MONAD_API_KEY","REACT_APP_MONAD_API_KEY","monadAPI","getCollections","limit","offset","network","_data$result","_data$result2","rpcUrl","response","fetch","method","headers","body","JSON","stringify","jsonrpc","params","includeStats","id","ok","getSimulatedMonadCollections","data","json","collections","formatMonadCollections","result","continuation","hasMore","error","console","searchCollections","query","_data$result3","_data$result4","searchSimulatedMonadCollections","getTrendingCollections","period","_data$result5","_data$result6","getSimulatedTrendingCollections","getUserCollections","address","_data$result7","includeMetadata","getSimulatedPortfolio","formatMonadPortfolio","getMonPrice","_data$monad","monad","usd","getSimulatedMonPrice","baseCollections","name","symbol","contractAddress","image","floorPrice","volume24h","volume7d","volumeAllTime","owners","totalSupply","change24h","change7d","description","royalties","sales24h","sales7d","marketCap","verified","map","collection","addPriceFluctuation","addVolumeFluctuation","addChangeFluctuation","start","end","paginatedCollections","slice","length","allCollections","filtered","filter","toLowerCase","includes","paginatedResults","trending","sort","a","b","paginatedTrending","ownedCount","Math","floor","random","floorValue","totalValue","basePrice","variation","sin","Date","now","max","baseVolume","baseChange","monadNetworkAPI","getNetworkStats","blockNumber","parseInt","blockHeight","tps","gasPrice","activeValidators"],"sources":["C:/Personal/nft-dashboard/src/services/apiService.js"],"sourcesContent":["const MONAD_MAINNET_RPC = process.env.REACT_APP_MONAD_MAINNET_RPC || 'https://rpc.monad.xyz';\nconst MONAD_TESTNET_RPC = process.env.REACT_APP_MONAD_TESTNET_RPC || 'https://testnet-rpc.monad.xyz';\nconst MONAD_API_KEY = process.env.REACT_APP_MONAD_API_KEY;\n\n// Monad NFT API service\nexport const monadAPI = {\n  // Get Monad collections with pagination\n  async getCollections(limit = 20, offset = 0, network = 'mainnet') {\n    try {\n      const rpcUrl = network === 'testnet' ? MONAD_TESTNET_RPC : MONAD_MAINNET_RPC;\n      \n      // Simulate Monad NFT marketplace API call\n      const response = await fetch(`${rpcUrl}/api/v1/nft/collections`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${MONAD_API_KEY}`,\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          method: 'monad_getNFTCollections',\n          params: {\n            limit,\n            offset,\n            network,\n            includeStats: true\n          },\n          id: 1\n        })\n      });\n\n      if (!response.ok) {\n        // Fallback to simulated Monad data\n        return this.getSimulatedMonadCollections(limit, offset, network);\n      }\n\n      const data = await response.json();\n      return {\n        collections: this.formatMonadCollections(data.result?.collections || []),\n        continuation: data.result?.hasMore ? `${offset + limit}` : null,\n        network\n      };\n    } catch (error) {\n      console.error('Monad API error:', error);\n      return this.getSimulatedMonadCollections(limit, offset, network);\n    }\n  },\n\n  // Search Monad collections\n  async searchCollections(query, limit = 20, offset = 0, network = 'mainnet') {\n    try {\n      const rpcUrl = network === 'testnet' ? MONAD_TESTNET_RPC : MONAD_MAINNET_RPC;\n      \n      const response = await fetch(`${rpcUrl}/api/v1/nft/search`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${MONAD_API_KEY}`,\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          method: 'monad_searchNFTCollections',\n          params: {\n            query,\n            limit,\n            offset,\n            network\n          },\n          id: 1\n        })\n      });\n\n      if (!response.ok) {\n        return this.searchSimulatedMonadCollections(query, limit, offset, network);\n      }\n\n      const data = await response.json();\n      return {\n        collections: this.formatMonadCollections(data.result?.collections || []),\n        continuation: data.result?.hasMore ? `${offset + limit}` : null,\n        network\n      };\n    } catch (error) {\n      console.error('Monad search error:', error);\n      return this.searchSimulatedMonadCollections(query, limit, offset, network);\n    }\n  },\n\n  // Get trending Monad collections\n  async getTrendingCollections(period = '24h', limit = 20, offset = 0, network = 'mainnet') {\n    try {\n      const rpcUrl = network === 'testnet' ? MONAD_TESTNET_RPC : MONAD_MAINNET_RPC;\n      \n      const response = await fetch(`${rpcUrl}/api/v1/nft/trending`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${MONAD_API_KEY}`,\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          method: 'monad_getTrendingCollections',\n          params: {\n            period,\n            limit,\n            offset,\n            network\n          },\n          id: 1\n        })\n      });\n\n      if (!response.ok) {\n        return this.getSimulatedTrendingCollections(limit, offset, network);\n      }\n\n      const data = await response.json();\n      return {\n        collections: this.formatMonadCollections(data.result?.collections || []),\n        continuation: data.result?.hasMore ? `${offset + limit}` : null,\n        network\n      };\n    } catch (error) {\n      console.error('Monad trending error:', error);\n      return this.getSimulatedTrendingCollections(limit, offset, network);\n    }\n  },\n\n  // Get Monad wallet portfolio\n  async getUserCollections(address, offset = 0, limit = 20, network = 'mainnet') {\n    try {\n      const rpcUrl = network === 'testnet' ? MONAD_TESTNET_RPC : MONAD_MAINNET_RPC;\n      \n      const response = await fetch(`${rpcUrl}/api/v1/nft/portfolio`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${MONAD_API_KEY}`,\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          method: 'monad_getWalletNFTs',\n          params: {\n            address,\n            limit,\n            offset,\n            network,\n            includeMetadata: true\n          },\n          id: 1\n        })\n      });\n\n      if (!response.ok) {\n        return this.getSimulatedPortfolio(address, network);\n      }\n\n      const data = await response.json();\n      return this.formatMonadPortfolio(data.result?.collections || []);\n    } catch (error) {\n      console.error('Monad portfolio error:', error);\n      return this.getSimulatedPortfolio(address, network);\n    }\n  },\n\n  // Get MON token price\n  async getMonPrice() {\n    try {\n      // Simulate MON price API\n      const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=monad&vs_currencies=usd');\n      const data = await response.json();\n      return data.monad?.usd || this.getSimulatedMonPrice();\n    } catch (error) {\n      return this.getSimulatedMonPrice();\n    }\n  },\n\n  // Simulated Monad collections for development\n  getSimulatedMonadCollections(limit, offset, network) {\n    const baseCollections = [\n      {\n        id: 'monad-genesis',\n        name: 'Monad Genesis',\n        symbol: 'MGEN',\n        contractAddress: '0x1234567890123456789012345678901234567890',\n        image: 'https://picsum.photos/id/1041/400/200',\n        floorPrice: 5500,\n        volume24h: 89000,\n        volume7d: 234000,\n        volumeAllTime: 1200000,\n        owners: 999,\n        totalSupply: 1000,\n        change24h: 31.5,\n        change7d: 45.2,\n        description: 'The original founders collection on Monad blockchain',\n        royalties: 500,\n        sales24h: 12,\n        sales7d: 45,\n        marketCap: 5500000,\n        verified: true,\n        network\n      },\n      {\n        id: 'monad-monks',\n        name: 'Monad Monks',\n        symbol: 'MONKS',\n        contractAddress: '0x2345678901234567890123456789012345678901',\n        image: 'https://picsum.photos/id/1011/400/200',\n        floorPrice: 2500,\n        volume24h: 45000,\n        volume7d: 156000,\n        volumeAllTime: 890000,\n        owners: 3247,\n        totalSupply: 5000,\n        change24h: 15.7,\n        change7d: 22.1,\n        description: 'Sacred guardians of the Monad blockchain ecosystem',\n        royalties: 500,\n        sales24h: 18,\n        sales7d: 67,\n        marketCap: 12500000,\n        verified: true,\n        network\n      },\n      {\n        id: 'monad-portals',\n        name: 'Monad Portals',\n        symbol: 'PORTALS',\n        contractAddress: '0x3456789012345678901234567890123456789012',\n        image: 'https://picsum.photos/id/1015/400/200',\n        floorPrice: 1800,\n        volume24h: 32000,\n        volume7d: 98000,\n        volumeAllTime: 567000,\n        owners: 2156,\n        totalSupply: 3333,\n        change24h: 8.3,\n        change7d: 12.7,\n        description: 'Interdimensional gateways powered by Monad speed',\n        royalties: 750,\n        sales24h: 22,\n        sales7d: 89,\n        marketCap: 5999400,\n        verified: true,\n        network\n      },\n      {\n        id: 'monad-crystals',\n        name: 'Monad Crystals',\n        symbol: 'CRYSTALS',\n        contractAddress: '0x4567890123456789012345678901234567890123',\n        image: 'https://picsum.photos/id/1025/400/200',\n        floorPrice: 950,\n        volume24h: 28500,\n        volume7d: 87000,\n        volumeAllTime: 445000,\n        owners: 4892,\n        totalSupply: 8888,\n        change24h: 22.1,\n        change7d: 18.9,\n        description: 'Energy cores that fuel the Monad metaverse',\n        royalties: 250,\n        sales24h: 30,\n        sales7d: 112,\n        marketCap: 8443600,\n        verified: true,\n        network\n      },\n      {\n        id: 'monad-mechs',\n        name: 'Monad Mechs',\n        symbol: 'MECHS',\n        contractAddress: '0x5678901234567890123456789012345678901234',\n        image: 'https://picsum.photos/id/180/400/200',\n        floorPrice: 3200,\n        volume24h: 67000,\n        volume7d: 189000,\n        volumeAllTime: 1100000,\n        owners: 1834,\n        totalSupply: 2500,\n        change24h: -3.2,\n        change7d: 5.8,\n        description: 'Elite battle machines defending Monad space',\n        royalties: 1000,\n        sales24h: 21,\n        sales7d: 59,\n        marketCap: 8000000,\n        verified: true,\n        network\n      },\n      {\n        id: 'monad-spirits',\n        name: 'Monad Spirits',\n        symbol: 'SPIRITS',\n        contractAddress: '0x6789012345678901234567890123456789012345',\n        image: 'https://picsum.photos/id/1027/400/200',\n        floorPrice: 750,\n        volume24h: 19800,\n        volume7d: 67000,\n        volumeAllTime: 334000,\n        owners: 6234,\n        totalSupply: 10000,\n        change24h: 12.8,\n        change7d: 9.4,\n        description: 'Ethereal beings native to the Monad dimension',\n        royalties: 300,\n        sales24h: 26,\n        sales7d: 89,\n        marketCap: 7500000,\n        verified: true,\n        network\n      }\n    ];\n\n    // Add time-based price fluctuations\n    const collections = baseCollections.map(collection => ({\n      ...collection,\n      floorPrice: this.addPriceFluctuation(collection.floorPrice),\n      volume24h: this.addVolumeFluctuation(collection.volume24h),\n      change24h: this.addChangeFluctuation(collection.change24h)\n    }));\n\n    const start = offset;\n    const end = offset + limit;\n    const paginatedCollections = collections.slice(start, end);\n    \n    return {\n      collections: paginatedCollections,\n      continuation: end < collections.length ? `${end}` : null,\n      network\n    };\n  },\n\n  searchSimulatedMonadCollections(query, limit, offset, network) {\n    const allCollections = this.getSimulatedMonadCollections(100, 0, network).collections;\n    const filtered = allCollections.filter(collection =>\n      collection.name.toLowerCase().includes(query.toLowerCase()) ||\n      collection.symbol.toLowerCase().includes(query.toLowerCase())\n    );\n\n    const start = offset;\n    const end = offset + limit;\n    const paginatedResults = filtered.slice(start, end);\n\n    return {\n      collections: paginatedResults,\n      continuation: end < filtered.length ? `${end}` : null,\n      network\n    };\n  },\n\n  getSimulatedTrendingCollections(limit, offset, network) {\n    const collections = this.getSimulatedMonadCollections(100, 0, network).collections;\n    // Sort by 24h volume for trending\n    const trending = collections.sort((a, b) => b.volume24h - a.volume24h);\n    \n    const start = offset;\n    const end = offset + limit;\n    const paginatedTrending = trending.slice(start, end);\n\n    return {\n      collections: paginatedTrending,\n      continuation: end < trending.length ? `${end}` : null,\n      network\n    };\n  },\n\n  getSimulatedPortfolio(address, network) {\n    // Simulate user portfolio based on address\n    const collections = this.getSimulatedMonadCollections(6, 0, network).collections;\n    return collections.slice(0, 3).map(collection => ({\n      ...collection,\n      ownedCount: Math.floor(Math.random() * 5) + 1,\n      floorValue: collection.floorPrice,\n      totalValue: collection.floorPrice * (Math.floor(Math.random() * 5) + 1)\n    }));\n  },\n\n  getSimulatedMonPrice() {\n    const basePrice = 12.50;\n    const variation = Math.sin(Date.now() / 200000) * 2 + (Math.random() - 0.5) * 1;\n    return Math.max(basePrice + variation, 8);\n  },\n\n  addPriceFluctuation(basePrice) {\n    const variation = Math.sin(Date.now() / 100000) * 0.1 + (Math.random() - 0.5) * 0.05;\n    return Math.max(basePrice * (1 + variation), basePrice * 0.8);\n  },\n\n  addVolumeFluctuation(baseVolume) {\n    const variation = (Math.random() - 0.5) * 0.3;\n    return Math.max(baseVolume * (1 + variation), 0);\n  },\n\n  addChangeFluctuation(baseChange) {\n    const variation = (Math.random() - 0.5) * 10;\n    return baseChange + variation;\n  },\n\n  formatMonadCollections(collections) {\n    return collections;\n  },\n\n  formatMonadPortfolio(collections) {\n    return collections;\n  }\n};\n\n// Monad network utilities\nexport const monadNetworkAPI = {\n  async getNetworkStats(network = 'mainnet') {\n    try {\n      const rpcUrl = network === 'testnet' ? MONAD_TESTNET_RPC : MONAD_MAINNET_RPC;\n      \n      const response = await fetch(rpcUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          method: 'eth_blockNumber',\n          params: [],\n          id: 1\n        })\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        const blockNumber = parseInt(data.result, 16);\n        \n        return {\n          blockHeight: blockNumber,\n          tps: 10000 + Math.floor(Math.random() * 2000),\n          gasPrice: 0.001,\n          activeValidators: network === 'testnet' ? 50 : 100,\n          network\n        };\n      }\n    } catch (error) {\n      console.error('Monad network error:', error);\n    }\n\n    // Fallback simulated stats\n    return {\n      blockHeight: 1234567 + Math.floor(Date.now() / 1000),\n      tps: 10000 + Math.floor(Math.random() * 2000),\n      gasPrice: 0.001,\n      activeValidators: network === 'testnet' ? 50 : 100,\n      network\n    };\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}