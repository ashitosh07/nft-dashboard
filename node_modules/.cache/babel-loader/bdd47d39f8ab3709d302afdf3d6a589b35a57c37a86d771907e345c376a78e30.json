{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { monadAPI, fallbackCollections } from '../services/apiService';\nexport const useNFTData = () => {\n  _s();\n  const [collections, setCollections] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [monPrice, setMonPrice] = useState(0);\n  const [networkStats, setNetworkStats] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(null);\n  const fetchCollections = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Fetch from Monad API\n      const monadData = await monadAPI.getCollections();\n      if (monadData !== null && monadData !== void 0 && monadData.collections) {\n        setCollections(monadData.collections);\n      } else {\n        setCollections(fallbackCollections);\n      }\n      setLastUpdated(new Date());\n    } catch (err) {\n      console.error('Error fetching collections:', err);\n      setError('Failed to fetch NFT data');\n      setCollections(fallbackCollections);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const fetchMonadData = useCallback(async () => {\n    try {\n      const [price, stats] = await Promise.all([monadAPI.getMonadPrice(), monadAPI.getNetworkStats()]);\n      setMonPrice(price);\n      setNetworkStats(stats);\n    } catch (err) {\n      console.error('Error fetching Monad data:', err);\n    }\n  }, []);\n  useEffect(() => {\n    fetchCollections();\n    fetchMonadData();\n\n    // Refresh data every 30 seconds for real-time feel\n    const interval = setInterval(() => {\n      fetchCollections();\n      fetchMonadData();\n    }, 30000);\n    return () => clearInterval(interval);\n  }, [fetchCollections, fetchMonadData]);\n  const refreshData = useCallback(() => {\n    fetchCollections();\n    fetchMonadData();\n  }, [fetchCollections, fetchMonadData]);\n  return {\n    collections,\n    loading,\n    error,\n    monPrice,\n    networkStats,\n    lastUpdated,\n    refreshData\n  };\n};\n_s(useNFTData, \"0bSGeU3mmRzqv+Z1G98PnxEpQcc=\");","map":{"version":3,"names":["useState","useEffect","useCallback","monadAPI","fallbackCollections","useNFTData","_s","collections","setCollections","loading","setLoading","error","setError","monPrice","setMonPrice","networkStats","setNetworkStats","lastUpdated","setLastUpdated","fetchCollections","monadData","getCollections","Date","err","console","fetchMonadData","price","stats","Promise","all","getMonadPrice","getNetworkStats","interval","setInterval","clearInterval","refreshData"],"sources":["C:/Personal/nft-dashboard/src/hooks/useNFTData.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { monadAPI, fallbackCollections } from '../services/apiService';\n\nexport const useNFTData = () => {\n  const [collections, setCollections] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [monPrice, setMonPrice] = useState(0);\n  const [networkStats, setNetworkStats] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(null);\n\n  const fetchCollections = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // Fetch from Monad API\n      const monadData = await monadAPI.getCollections();\n      \n      if (monadData?.collections) {\n        setCollections(monadData.collections);\n      } else {\n        setCollections(fallbackCollections);\n      }\n      \n      setLastUpdated(new Date());\n    } catch (err) {\n      console.error('Error fetching collections:', err);\n      setError('Failed to fetch NFT data');\n      setCollections(fallbackCollections);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const fetchMonadData = useCallback(async () => {\n    try {\n      const [price, stats] = await Promise.all([\n        monadAPI.getMonadPrice(),\n        monadAPI.getNetworkStats()\n      ]);\n      setMonPrice(price);\n      setNetworkStats(stats);\n    } catch (err) {\n      console.error('Error fetching Monad data:', err);\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchCollections();\n    fetchMonadData();\n    \n    // Refresh data every 30 seconds for real-time feel\n    const interval = setInterval(() => {\n      fetchCollections();\n      fetchMonadData();\n    }, 30000);\n    \n    return () => clearInterval(interval);\n  }, [fetchCollections, fetchMonadData]);\n\n  const refreshData = useCallback(() => {\n    fetchCollections();\n    fetchMonadData();\n  }, [fetchCollections, fetchMonadData]);\n\n  return {\n    collections,\n    loading,\n    error,\n    monPrice,\n    networkStats,\n    lastUpdated,\n    refreshData\n  };\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,SAASC,QAAQ,EAAEC,mBAAmB,QAAQ,wBAAwB;AAEtE,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACe,YAAY,EAAEC,eAAe,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACiB,WAAW,EAAEC,cAAc,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAEpD,MAAMmB,gBAAgB,GAAGjB,WAAW,CAAC,YAAY;IAC/CQ,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF;MACA,MAAMQ,SAAS,GAAG,MAAMjB,QAAQ,CAACkB,cAAc,CAAC,CAAC;MAEjD,IAAID,SAAS,aAATA,SAAS,eAATA,SAAS,CAAEb,WAAW,EAAE;QAC1BC,cAAc,CAACY,SAAS,CAACb,WAAW,CAAC;MACvC,CAAC,MAAM;QACLC,cAAc,CAACJ,mBAAmB,CAAC;MACrC;MAEAc,cAAc,CAAC,IAAII,IAAI,CAAC,CAAC,CAAC;IAC5B,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZC,OAAO,CAACb,KAAK,CAAC,6BAA6B,EAAEY,GAAG,CAAC;MACjDX,QAAQ,CAAC,0BAA0B,CAAC;MACpCJ,cAAc,CAACJ,mBAAmB,CAAC;IACrC,CAAC,SAAS;MACRM,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMe,cAAc,GAAGvB,WAAW,CAAC,YAAY;IAC7C,IAAI;MACF,MAAM,CAACwB,KAAK,EAAEC,KAAK,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACvC1B,QAAQ,CAAC2B,aAAa,CAAC,CAAC,EACxB3B,QAAQ,CAAC4B,eAAe,CAAC,CAAC,CAC3B,CAAC;MACFjB,WAAW,CAACY,KAAK,CAAC;MAClBV,eAAe,CAACW,KAAK,CAAC;IACxB,CAAC,CAAC,OAAOJ,GAAG,EAAE;MACZC,OAAO,CAACb,KAAK,CAAC,4BAA4B,EAAEY,GAAG,CAAC;IAClD;EACF,CAAC,EAAE,EAAE,CAAC;EAENtB,SAAS,CAAC,MAAM;IACdkB,gBAAgB,CAAC,CAAC;IAClBM,cAAc,CAAC,CAAC;;IAEhB;IACA,MAAMO,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjCd,gBAAgB,CAAC,CAAC;MAClBM,cAAc,CAAC,CAAC;IAClB,CAAC,EAAE,KAAK,CAAC;IAET,OAAO,MAAMS,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,CAACb,gBAAgB,EAAEM,cAAc,CAAC,CAAC;EAEtC,MAAMU,WAAW,GAAGjC,WAAW,CAAC,MAAM;IACpCiB,gBAAgB,CAAC,CAAC;IAClBM,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACN,gBAAgB,EAAEM,cAAc,CAAC,CAAC;EAEtC,OAAO;IACLlB,WAAW;IACXE,OAAO;IACPE,KAAK;IACLE,QAAQ;IACRE,YAAY;IACZE,WAAW;IACXkB;EACF,CAAC;AACH,CAAC;AAAC7B,EAAA,CAxEWD,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}