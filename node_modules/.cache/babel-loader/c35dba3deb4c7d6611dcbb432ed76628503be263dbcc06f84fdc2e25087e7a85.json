{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { reservoirAPI, coinGeckoAPI, fallbackCollections } from '../services/apiService';\nexport const useNFTData = () => {\n  _s();\n  const [collections, setCollections] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [ethPrice, setEthPrice] = useState(0);\n  const [lastUpdated, setLastUpdated] = useState(null);\n  const fetchCollections = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Fetch from Reservoir API (most reliable for NFT data)\n      const reservoirData = await reservoirAPI.getCollections(20);\n      if (reservoirData !== null && reservoirData !== void 0 && reservoirData.collections) {\n        const formattedCollections = reservoirData.collections.map((collection, index) => {\n          var _collection$sampleIma, _collection$floorAsk, _collection$floorAsk$, _collection$floorAsk$2, _collection$volume, _collection$volume2, _collection$floorSale, _collection$royalties;\n          return {\n            id: collection.id || `collection-${index}`,\n            name: collection.name || 'Unknown Collection',\n            symbol: collection.symbol || 'N/A',\n            image: collection.image || ((_collection$sampleIma = collection.sampleImages) === null || _collection$sampleIma === void 0 ? void 0 : _collection$sampleIma[0]) || 'https://via.placeholder.com/400x200/6366f1/ffffff?text=NFT',\n            floorPrice: ((_collection$floorAsk = collection.floorAsk) === null || _collection$floorAsk === void 0 ? void 0 : (_collection$floorAsk$ = _collection$floorAsk.price) === null || _collection$floorAsk$ === void 0 ? void 0 : (_collection$floorAsk$2 = _collection$floorAsk$.amount) === null || _collection$floorAsk$2 === void 0 ? void 0 : _collection$floorAsk$2.decimal) || 0,\n            volume24h: ((_collection$volume = collection.volume) === null || _collection$volume === void 0 ? void 0 : _collection$volume['1day']) || 0,\n            volumeAllTime: ((_collection$volume2 = collection.volume) === null || _collection$volume2 === void 0 ? void 0 : _collection$volume2.allTime) || 0,\n            owners: collection.ownerCount || 0,\n            totalSupply: collection.tokenCount || 0,\n            change24h: ((_collection$floorSale = collection.floorSaleChange) === null || _collection$floorSale === void 0 ? void 0 : _collection$floorSale['1day']) || 0,\n            description: collection.description || 'NFT Collection',\n            contractAddress: collection.primaryContract,\n            createdAt: collection.createdAt,\n            royalties: ((_collection$royalties = collection.royalties) === null || _collection$royalties === void 0 ? void 0 : _collection$royalties.bps) || 0\n          };\n        });\n        setCollections(formattedCollections);\n      } else {\n        // Fallback to mock data if API fails\n        setCollections(fallbackCollections);\n      }\n      setLastUpdated(new Date());\n    } catch (err) {\n      console.error('Error fetching collections:', err);\n      setError('Failed to fetch NFT data');\n      setCollections(fallbackCollections);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const fetchETHPrice = useCallback(async () => {\n    try {\n      const price = await coinGeckoAPI.getETHPrice();\n      setEthPrice(price);\n    } catch (err) {\n      console.error('Error fetching ETH price:', err);\n    }\n  }, []);\n  useEffect(() => {\n    fetchCollections();\n    fetchETHPrice();\n\n    // Refresh data every 5 minutes\n    const interval = setInterval(() => {\n      fetchCollections();\n      fetchETHPrice();\n    }, 300000);\n    return () => clearInterval(interval);\n  }, [fetchCollections, fetchETHPrice]);\n  const refreshData = useCallback(() => {\n    fetchCollections();\n    fetchETHPrice();\n  }, [fetchCollections, fetchETHPrice]);\n  return {\n    collections,\n    loading,\n    error,\n    ethPrice,\n    lastUpdated,\n    refreshData\n  };\n};\n_s(useNFTData, \"MKnnnSdhBMO0DP4F1yaKBjtAygs=\");","map":{"version":3,"names":["useState","useEffect","useCallback","reservoirAPI","coinGeckoAPI","fallbackCollections","useNFTData","_s","collections","setCollections","loading","setLoading","error","setError","ethPrice","setEthPrice","lastUpdated","setLastUpdated","fetchCollections","reservoirData","getCollections","formattedCollections","map","collection","index","_collection$sampleIma","_collection$floorAsk","_collection$floorAsk$","_collection$floorAsk$2","_collection$volume","_collection$volume2","_collection$floorSale","_collection$royalties","id","name","symbol","image","sampleImages","floorPrice","floorAsk","price","amount","decimal","volume24h","volume","volumeAllTime","allTime","owners","ownerCount","totalSupply","tokenCount","change24h","floorSaleChange","description","contractAddress","primaryContract","createdAt","royalties","bps","Date","err","console","fetchETHPrice","getETHPrice","interval","setInterval","clearInterval","refreshData"],"sources":["C:/Personal/nft-dashboard/src/hooks/useNFTData.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { reservoirAPI, coinGeckoAPI, fallbackCollections } from '../services/apiService';\n\nexport const useNFTData = () => {\n  const [collections, setCollections] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [ethPrice, setEthPrice] = useState(0);\n  const [lastUpdated, setLastUpdated] = useState(null);\n\n  const fetchCollections = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // Fetch from Reservoir API (most reliable for NFT data)\n      const reservoirData = await reservoirAPI.getCollections(20);\n      \n      if (reservoirData?.collections) {\n        const formattedCollections = reservoirData.collections.map((collection, index) => ({\n          id: collection.id || `collection-${index}`,\n          name: collection.name || 'Unknown Collection',\n          symbol: collection.symbol || 'N/A',\n          image: collection.image || collection.sampleImages?.[0] || 'https://via.placeholder.com/400x200/6366f1/ffffff?text=NFT',\n          floorPrice: collection.floorAsk?.price?.amount?.decimal || 0,\n          volume24h: collection.volume?.['1day'] || 0,\n          volumeAllTime: collection.volume?.allTime || 0,\n          owners: collection.ownerCount || 0,\n          totalSupply: collection.tokenCount || 0,\n          change24h: collection.floorSaleChange?.['1day'] || 0,\n          description: collection.description || 'NFT Collection',\n          contractAddress: collection.primaryContract,\n          createdAt: collection.createdAt,\n          royalties: collection.royalties?.bps || 0\n        }));\n        \n        setCollections(formattedCollections);\n      } else {\n        // Fallback to mock data if API fails\n        setCollections(fallbackCollections);\n      }\n      \n      setLastUpdated(new Date());\n    } catch (err) {\n      console.error('Error fetching collections:', err);\n      setError('Failed to fetch NFT data');\n      setCollections(fallbackCollections);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const fetchETHPrice = useCallback(async () => {\n    try {\n      const price = await coinGeckoAPI.getETHPrice();\n      setEthPrice(price);\n    } catch (err) {\n      console.error('Error fetching ETH price:', err);\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchCollections();\n    fetchETHPrice();\n    \n    // Refresh data every 5 minutes\n    const interval = setInterval(() => {\n      fetchCollections();\n      fetchETHPrice();\n    }, 300000);\n    \n    return () => clearInterval(interval);\n  }, [fetchCollections, fetchETHPrice]);\n\n  const refreshData = useCallback(() => {\n    fetchCollections();\n    fetchETHPrice();\n  }, [fetchCollections, fetchETHPrice]);\n\n  return {\n    collections,\n    loading,\n    error,\n    ethPrice,\n    lastUpdated,\n    refreshData\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}