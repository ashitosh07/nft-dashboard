{"ast":null,"code":"const OPENSEA_API_KEY = process.env.REACT_APP_OPENSEA_API_KEY;\nconst MORALIS_API_KEY = process.env.REACT_APP_MORALIS_API_KEY;\nconst COINGECKO_API = 'https://api.coingecko.com/api/v3';\n\n// OpenSea API service\nexport const openSeaAPI = {\n  async getCollections(limit = 20) {\n    try {\n      const response = await fetch(`https://api.opensea.io/api/v2/collections?limit=${limit}`, {\n        headers: {\n          'X-API-KEY': OPENSEA_API_KEY || ''\n        }\n      });\n      return await response.json();\n    } catch (error) {\n      console.error('OpenSea API error:', error);\n      return null;\n    }\n  },\n  async getCollectionStats(slug) {\n    try {\n      const response = await fetch(`https://api.opensea.io/api/v2/collections/${slug}/stats`, {\n        headers: {\n          'X-API-KEY': OPENSEA_API_KEY || ''\n        }\n      });\n      return await response.json();\n    } catch (error) {\n      console.error('OpenSea stats error:', error);\n      return null;\n    }\n  }\n};\n\n// Moralis API service\nexport const moralisAPI = {\n  async getNFTCollections(chain = 'eth') {\n    try {\n      const response = await fetch(`https://deep-index.moralis.io/api/v2/nft/collections/top?chain=${chain}&limit=20`, {\n        headers: {\n          'X-API-Key': MORALIS_API_KEY || ''\n        }\n      });\n      return await response.json();\n    } catch (error) {\n      console.error('Moralis API error:', error);\n      return null;\n    }\n  },\n  async getCollectionMetadata(address, chain = 'eth') {\n    try {\n      const response = await fetch(`https://deep-index.moralis.io/api/v2/nft/${address}/metadata?chain=${chain}`, {\n        headers: {\n          'X-API-Key': MORALIS_API_KEY || ''\n        }\n      });\n      return await response.json();\n    } catch (error) {\n      console.error('Moralis metadata error:', error);\n      return null;\n    }\n  }\n};\n\n// CoinGecko API for price data\nexport const coinGeckoAPI = {\n  async getETHPrice() {\n    try {\n      var _data$ethereum;\n      const response = await fetch(`${COINGECKO_API}/simple/price?ids=ethereum&vs_currencies=usd`);\n      const data = await response.json();\n      return ((_data$ethereum = data.ethereum) === null || _data$ethereum === void 0 ? void 0 : _data$ethereum.usd) || 0;\n    } catch (error) {\n      console.error('CoinGecko API error:', error);\n      return 0;\n    }\n  },\n  async getCryptoTrends() {\n    try {\n      const response = await fetch(`${COINGECKO_API}/search/trending`);\n      return await response.json();\n    } catch (error) {\n      console.error('CoinGecko trends error:', error);\n      return null;\n    }\n  }\n};\n\n// Reservoir API for comprehensive NFT data\nexport const reservoirAPI = {\n  async getCollections(limit = 20) {\n    try {\n      const response = await fetch(`https://api.reservoir.tools/collections/v7?sortBy=allTimeVolume&limit=${limit}`);\n      return await response.json();\n    } catch (error) {\n      console.error('Reservoir API error:', error);\n      return null;\n    }\n  },\n  async getCollectionActivity(collection) {\n    try {\n      const response = await fetch(`https://api.reservoir.tools/collections/activity/v6?collection=${collection}&limit=20`);\n      return await response.json();\n    } catch (error) {\n      console.error('Reservoir activity error:', error);\n      return null;\n    }\n  }\n};\n\n// Fallback data for when APIs fail\nexport const fallbackCollections = [{\n  id: 'bayc',\n  name: 'Bored Ape Yacht Club',\n  symbol: 'BAYC',\n  image: 'https://i.seadn.io/gae/Ju9CkWtV-1Okvf45wo8UctR-M9He2PjILP0oOvxE89AyiPPGtrR3gysu1Zgy0hjd2xKIgjJJtWIc0ybj4Vd7wv8t3pxDGHoJBzDB?auto=format&dpr=1&w=384',\n  floorPrice: 15.2,\n  volume24h: 234.5,\n  owners: 5847,\n  totalSupply: 10000,\n  change24h: 5.2,\n  description: 'A collection of 10,000 unique Bored Ape NFTs'\n}];","map":{"version":3,"names":["OPENSEA_API_KEY","process","env","REACT_APP_OPENSEA_API_KEY","MORALIS_API_KEY","REACT_APP_MORALIS_API_KEY","COINGECKO_API","openSeaAPI","getCollections","limit","response","fetch","headers","json","error","console","getCollectionStats","slug","moralisAPI","getNFTCollections","chain","getCollectionMetadata","address","coinGeckoAPI","getETHPrice","_data$ethereum","data","ethereum","usd","getCryptoTrends","reservoirAPI","getCollectionActivity","collection","fallbackCollections","id","name","symbol","image","floorPrice","volume24h","owners","totalSupply","change24h","description"],"sources":["C:/Personal/nft-dashboard/src/services/apiService.js"],"sourcesContent":["const OPENSEA_API_KEY = process.env.REACT_APP_OPENSEA_API_KEY;\nconst MORALIS_API_KEY = process.env.REACT_APP_MORALIS_API_KEY;\nconst COINGECKO_API = 'https://api.coingecko.com/api/v3';\n\n// OpenSea API service\nexport const openSeaAPI = {\n  async getCollections(limit = 20) {\n    try {\n      const response = await fetch(`https://api.opensea.io/api/v2/collections?limit=${limit}`, {\n        headers: {\n          'X-API-KEY': OPENSEA_API_KEY || ''\n        }\n      });\n      return await response.json();\n    } catch (error) {\n      console.error('OpenSea API error:', error);\n      return null;\n    }\n  },\n\n  async getCollectionStats(slug) {\n    try {\n      const response = await fetch(`https://api.opensea.io/api/v2/collections/${slug}/stats`, {\n        headers: {\n          'X-API-KEY': OPENSEA_API_KEY || ''\n        }\n      });\n      return await response.json();\n    } catch (error) {\n      console.error('OpenSea stats error:', error);\n      return null;\n    }\n  }\n};\n\n// Moralis API service\nexport const moralisAPI = {\n  async getNFTCollections(chain = 'eth') {\n    try {\n      const response = await fetch(`https://deep-index.moralis.io/api/v2/nft/collections/top?chain=${chain}&limit=20`, {\n        headers: {\n          'X-API-Key': MORALIS_API_KEY || ''\n        }\n      });\n      return await response.json();\n    } catch (error) {\n      console.error('Moralis API error:', error);\n      return null;\n    }\n  },\n\n  async getCollectionMetadata(address, chain = 'eth') {\n    try {\n      const response = await fetch(`https://deep-index.moralis.io/api/v2/nft/${address}/metadata?chain=${chain}`, {\n        headers: {\n          'X-API-Key': MORALIS_API_KEY || ''\n        }\n      });\n      return await response.json();\n    } catch (error) {\n      console.error('Moralis metadata error:', error);\n      return null;\n    }\n  }\n};\n\n// CoinGecko API for price data\nexport const coinGeckoAPI = {\n  async getETHPrice() {\n    try {\n      const response = await fetch(`${COINGECKO_API}/simple/price?ids=ethereum&vs_currencies=usd`);\n      const data = await response.json();\n      return data.ethereum?.usd || 0;\n    } catch (error) {\n      console.error('CoinGecko API error:', error);\n      return 0;\n    }\n  },\n\n  async getCryptoTrends() {\n    try {\n      const response = await fetch(`${COINGECKO_API}/search/trending`);\n      return await response.json();\n    } catch (error) {\n      console.error('CoinGecko trends error:', error);\n      return null;\n    }\n  }\n};\n\n// Reservoir API for comprehensive NFT data\nexport const reservoirAPI = {\n  async getCollections(limit = 20) {\n    try {\n      const response = await fetch(`https://api.reservoir.tools/collections/v7?sortBy=allTimeVolume&limit=${limit}`);\n      return await response.json();\n    } catch (error) {\n      console.error('Reservoir API error:', error);\n      return null;\n    }\n  },\n\n  async getCollectionActivity(collection) {\n    try {\n      const response = await fetch(`https://api.reservoir.tools/collections/activity/v6?collection=${collection}&limit=20`);\n      return await response.json();\n    } catch (error) {\n      console.error('Reservoir activity error:', error);\n      return null;\n    }\n  }\n};\n\n// Fallback data for when APIs fail\nexport const fallbackCollections = [\n  {\n    id: 'bayc',\n    name: 'Bored Ape Yacht Club',\n    symbol: 'BAYC',\n    image: 'https://i.seadn.io/gae/Ju9CkWtV-1Okvf45wo8UctR-M9He2PjILP0oOvxE89AyiPPGtrR3gysu1Zgy0hjd2xKIgjJJtWIc0ybj4Vd7wv8t3pxDGHoJBzDB?auto=format&dpr=1&w=384',\n    floorPrice: 15.2,\n    volume24h: 234.5,\n    owners: 5847,\n    totalSupply: 10000,\n    change24h: 5.2,\n    description: 'A collection of 10,000 unique Bored Ape NFTs'\n  }\n];"],"mappings":"AAAA,MAAMA,eAAe,GAAGC,OAAO,CAACC,GAAG,CAACC,yBAAyB;AAC7D,MAAMC,eAAe,GAAGH,OAAO,CAACC,GAAG,CAACG,yBAAyB;AAC7D,MAAMC,aAAa,GAAG,kCAAkC;;AAExD;AACA,OAAO,MAAMC,UAAU,GAAG;EACxB,MAAMC,cAAcA,CAACC,KAAK,GAAG,EAAE,EAAE;IAC/B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mDAAmDF,KAAK,EAAE,EAAE;QACvFG,OAAO,EAAE;UACP,WAAW,EAAEZ,eAAe,IAAI;QAClC;MACF,CAAC,CAAC;MACF,OAAO,MAAMU,QAAQ,CAACG,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,OAAO,IAAI;IACb;EACF,CAAC;EAED,MAAME,kBAAkBA,CAACC,IAAI,EAAE;IAC7B,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAC,6CAA6CM,IAAI,QAAQ,EAAE;QACtFL,OAAO,EAAE;UACP,WAAW,EAAEZ,eAAe,IAAI;QAClC;MACF,CAAC,CAAC;MACF,OAAO,MAAMU,QAAQ,CAACG,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAO,IAAI;IACb;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,UAAU,GAAG;EACxB,MAAMC,iBAAiBA,CAACC,KAAK,GAAG,KAAK,EAAE;IACrC,IAAI;MACF,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAC,kEAAkES,KAAK,WAAW,EAAE;QAC/GR,OAAO,EAAE;UACP,WAAW,EAAER,eAAe,IAAI;QAClC;MACF,CAAC,CAAC;MACF,OAAO,MAAMM,QAAQ,CAACG,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,OAAO,IAAI;IACb;EACF,CAAC;EAED,MAAMO,qBAAqBA,CAACC,OAAO,EAAEF,KAAK,GAAG,KAAK,EAAE;IAClD,IAAI;MACF,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4CW,OAAO,mBAAmBF,KAAK,EAAE,EAAE;QAC1GR,OAAO,EAAE;UACP,WAAW,EAAER,eAAe,IAAI;QAClC;MACF,CAAC,CAAC;MACF,OAAO,MAAMM,QAAQ,CAACG,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,OAAO,IAAI;IACb;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMS,YAAY,GAAG;EAC1B,MAAMC,WAAWA,CAAA,EAAG;IAClB,IAAI;MAAA,IAAAC,cAAA;MACF,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,aAAa,8CAA8C,CAAC;MAC5F,MAAMoB,IAAI,GAAG,MAAMhB,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClC,OAAO,EAAAY,cAAA,GAAAC,IAAI,CAACC,QAAQ,cAAAF,cAAA,uBAAbA,cAAA,CAAeG,GAAG,KAAI,CAAC;IAChC,CAAC,CAAC,OAAOd,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAO,CAAC;IACV;EACF,CAAC;EAED,MAAMe,eAAeA,CAAA,EAAG;IACtB,IAAI;MACF,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,aAAa,kBAAkB,CAAC;MAChE,OAAO,MAAMI,QAAQ,CAACG,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,OAAO,IAAI;IACb;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMgB,YAAY,GAAG;EAC1B,MAAMtB,cAAcA,CAACC,KAAK,GAAG,EAAE,EAAE;IAC/B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yEAAyEF,KAAK,EAAE,CAAC;MAC9G,OAAO,MAAMC,QAAQ,CAACG,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAO,IAAI;IACb;EACF,CAAC;EAED,MAAMiB,qBAAqBA,CAACC,UAAU,EAAE;IACtC,IAAI;MACF,MAAMtB,QAAQ,GAAG,MAAMC,KAAK,CAAC,kEAAkEqB,UAAU,WAAW,CAAC;MACrH,OAAO,MAAMtB,QAAQ,CAACG,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,OAAO,IAAI;IACb;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMmB,mBAAmB,GAAG,CACjC;EACEC,EAAE,EAAE,MAAM;EACVC,IAAI,EAAE,sBAAsB;EAC5BC,MAAM,EAAE,MAAM;EACdC,KAAK,EAAE,qJAAqJ;EAC5JC,UAAU,EAAE,IAAI;EAChBC,SAAS,EAAE,KAAK;EAChBC,MAAM,EAAE,IAAI;EACZC,WAAW,EAAE,KAAK;EAClBC,SAAS,EAAE,GAAG;EACdC,WAAW,EAAE;AACf,CAAC,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}