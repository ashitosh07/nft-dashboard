{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { monadAPI, monadNetworkAPI } from '../services/apiService';\nexport const useNFTData = () => {\n  _s();\n  const [collections, setCollections] = useState([]);\n  const [trendingCollections, setTrendingCollections] = useState([]);\n  const [userPortfolio, setUserPortfolio] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [searchLoading, setSearchLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [monPrice, setMonPrice] = useState(0);\n  const [networkStats, setNetworkStats] = useState(null);\n  const [selectedNetwork, setSelectedNetwork] = useState('mainnet');\n  const [userAddress, setUserAddress] = useState('');\n  const [lastUpdated, setLastUpdated] = useState(null);\n\n  // Pagination states\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [hasNextPage, setHasNextPage] = useState(false);\n  const [hasPrevPage, setHasPrevPage] = useState(false);\n  const [continuation, setContinuation] = useState(null);\n\n  // Search states\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isSearchMode, setIsSearchMode] = useState(false);\n  const ITEMS_PER_PAGE = 20;\n  const fetchCollections = useCallback(async (page = 1) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const offset = (page - 1) * ITEMS_PER_PAGE;\n      const collectionsData = await monadAPI.getCollections(ITEMS_PER_PAGE, offset);\n      if (collectionsData && collectionsData.collections && collectionsData.collections.length > 0) {\n        setCollections(collectionsData.collections);\n        setHasNextPage(!!collectionsData.continuation);\n        setHasPrevPage(page > 1);\n        setContinuation(collectionsData.continuation);\n        setCurrentPage(page);\n        setTotalPages(page + (collectionsData.continuation ? 10 : 0));\n      } else {\n        setCollections([]);\n        setError('No collections found');\n      }\n      setLastUpdated(new Date());\n    } catch (err) {\n      console.error('Error fetching Monad collections:', err);\n      setError('Failed to fetch NFT data');\n      setCollections([]);\n    } finally {\n      setLoading(false);\n    }\n  }, [ITEMS_PER_PAGE]);\n  const fetchTrendingCollections = useCallback(async (page = 1) => {\n    try {\n      const offset = (page - 1) * ITEMS_PER_PAGE;\n      const trendingData = await monadAPI.getTrendingCollections('1d', ITEMS_PER_PAGE, offset);\n      if (trendingData && trendingData.collections) {\n        setTrendingCollections(trendingData.collections);\n      }\n    } catch (err) {\n      console.error('Error fetching trending Monad collections:', err);\n    }\n  }, [ITEMS_PER_PAGE]);\n  const searchCollections = useCallback(async (query, page = 1) => {\n    if (!query.trim()) {\n      setIsSearchMode(false);\n      fetchCollections(1);\n      return;\n    }\n    setSearchLoading(true);\n    setIsSearchMode(true);\n    setError(null);\n    try {\n      const offset = (page - 1) * ITEMS_PER_PAGE;\n      const searchData = await monadAPI.searchCollections(query, ITEMS_PER_PAGE, offset);\n      if (searchData && searchData.collections && searchData.collections.length > 0) {\n        setCollections(searchData.collections);\n        setHasNextPage(!!searchData.continuation);\n        setHasPrevPage(page > 1);\n        setContinuation(searchData.continuation);\n        setCurrentPage(page);\n        setTotalPages(page + (searchData.continuation ? 10 : 0));\n      } else {\n        setCollections([]);\n        setError(`No collections found for \"${query}\"`);\n      }\n    } catch (err) {\n      console.error('Error searching Monad collections:', err);\n      setError('Search failed');\n      setCollections([]);\n    } finally {\n      setSearchLoading(false);\n    }\n  }, [ITEMS_PER_PAGE, fetchCollections]);\n  const fetchMonadData = useCallback(async () => {\n    try {\n      const [price, stats] = await Promise.all([monadAPI.getMonPrice(), monadNetworkAPI.getNetworkStats(selectedNetwork)]);\n      setMonPrice(price);\n      setNetworkStats(stats);\n    } catch (err) {\n      console.error('Error fetching Monad data:', err);\n    }\n  }, [selectedNetwork]);\n  const fetchUserPortfolio = useCallback(async address => {\n    if (!address) return;\n    try {\n      const portfolio = await monadAPI.getUserCollections(address, 0, 20);\n      setUserPortfolio(portfolio);\n    } catch (err) {\n      console.error('Error fetching portfolio:', err);\n    }\n  }, []);\n  useEffect(() => {\n    fetchCollections(1);\n    fetchTrendingCollections(1);\n    fetchMonadData();\n  }, [fetchCollections, fetchTrendingCollections, fetchMonadData]);\n\n  // Remove network dependency since we're using real Magic Eden data\n  // useEffect(() => {\n  //   if (isSearchMode && searchQuery) {\n  //     searchCollections(searchQuery, 1);\n  //   } else {\n  //     fetchCollections(1);\n  //   }\n  //   fetchTrendingCollections(1);\n  //   if (userAddress) {\n  //     fetchUserPortfolio(userAddress);\n  //   }\n  // }, [selectedNetwork]);\n\n  useEffect(() => {\n    if (userAddress) {\n      fetchUserPortfolio(userAddress);\n    }\n  }, [userAddress, fetchUserPortfolio]);\n  const refreshData = useCallback(() => {\n    if (isSearchMode && searchQuery) {\n      searchCollections(searchQuery, 1);\n    } else {\n      fetchCollections(1);\n    }\n    fetchTrendingCollections(1);\n    fetchMonadData();\n    if (userAddress) {\n      fetchUserPortfolio(userAddress);\n    }\n  }, [fetchCollections, fetchTrendingCollections, fetchMonadData, fetchUserPortfolio, userAddress, isSearchMode, searchQuery, searchCollections]);\n  const handlePageChange = useCallback(page => {\n    if (isSearchMode && searchQuery) {\n      searchCollections(searchQuery, page);\n    } else {\n      fetchCollections(page);\n    }\n  }, [isSearchMode, searchQuery, searchCollections, fetchCollections]);\n  const handleSearch = useCallback(query => {\n    setSearchQuery(query);\n    searchCollections(query, 1);\n  }, [searchCollections]);\n  const clearSearch = useCallback(() => {\n    setSearchQuery('');\n    setIsSearchMode(false);\n    fetchCollections(1);\n  }, [fetchCollections]);\n  return {\n    collections,\n    trendingCollections,\n    userPortfolio,\n    loading,\n    searchLoading,\n    error,\n    monPrice,\n    networkStats,\n    selectedNetwork,\n    lastUpdated,\n    currentPage,\n    totalPages,\n    hasNextPage,\n    hasPrevPage,\n    searchQuery,\n    isSearchMode,\n    refreshData,\n    setUserAddress,\n    setSelectedNetwork,\n    handlePageChange,\n    handleSearch,\n    clearSearch,\n    fetchTrendingCollections\n  };\n};\n_s(useNFTData, \"9oaq2BqLJu1k0qtBP1+51r9Q5UE=\");","map":{"version":3,"names":["useState","useEffect","useCallback","monadAPI","monadNetworkAPI","useNFTData","_s","collections","setCollections","trendingCollections","setTrendingCollections","userPortfolio","setUserPortfolio","loading","setLoading","searchLoading","setSearchLoading","error","setError","monPrice","setMonPrice","networkStats","setNetworkStats","selectedNetwork","setSelectedNetwork","userAddress","setUserAddress","lastUpdated","setLastUpdated","currentPage","setCurrentPage","totalPages","setTotalPages","hasNextPage","setHasNextPage","hasPrevPage","setHasPrevPage","continuation","setContinuation","searchQuery","setSearchQuery","isSearchMode","setIsSearchMode","ITEMS_PER_PAGE","fetchCollections","page","offset","collectionsData","getCollections","length","Date","err","console","fetchTrendingCollections","trendingData","getTrendingCollections","searchCollections","query","trim","searchData","fetchMonadData","price","stats","Promise","all","getMonPrice","getNetworkStats","fetchUserPortfolio","address","portfolio","getUserCollections","refreshData","handlePageChange","handleSearch","clearSearch"],"sources":["C:/Personal/nft-dashboard/src/hooks/useNFTData.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { monadAPI, monadNetworkAPI } from '../services/apiService';\n\nexport const useNFTData = () => {\n  const [collections, setCollections] = useState([]);\n  const [trendingCollections, setTrendingCollections] = useState([]);\n  const [userPortfolio, setUserPortfolio] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [searchLoading, setSearchLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [monPrice, setMonPrice] = useState(0);\n  const [networkStats, setNetworkStats] = useState(null);\n  const [selectedNetwork, setSelectedNetwork] = useState('mainnet');\n  const [userAddress, setUserAddress] = useState('');\n  const [lastUpdated, setLastUpdated] = useState(null);\n  \n  // Pagination states\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [hasNextPage, setHasNextPage] = useState(false);\n  const [hasPrevPage, setHasPrevPage] = useState(false);\n  const [continuation, setContinuation] = useState(null);\n  \n  // Search states\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isSearchMode, setIsSearchMode] = useState(false);\n  \n  const ITEMS_PER_PAGE = 20;\n\n  const fetchCollections = useCallback(async (page = 1) => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const offset = (page - 1) * ITEMS_PER_PAGE;\n      const collectionsData = await monadAPI.getCollections(ITEMS_PER_PAGE, offset);\n      \n      if (collectionsData && collectionsData.collections && collectionsData.collections.length > 0) {\n        setCollections(collectionsData.collections);\n        setHasNextPage(!!collectionsData.continuation);\n        setHasPrevPage(page > 1);\n        setContinuation(collectionsData.continuation);\n        setCurrentPage(page);\n        setTotalPages(page + (collectionsData.continuation ? 10 : 0));\n      } else {\n        setCollections([]);\n        setError('No collections found');\n      }\n      \n      setLastUpdated(new Date());\n    } catch (err) {\n      console.error('Error fetching Monad collections:', err);\n      setError('Failed to fetch NFT data');\n      setCollections([]);\n    } finally {\n      setLoading(false);\n    }\n  }, [ITEMS_PER_PAGE]);\n\n  const fetchTrendingCollections = useCallback(async (page = 1) => {\n    try {\n      const offset = (page - 1) * ITEMS_PER_PAGE;\n      const trendingData = await monadAPI.getTrendingCollections('1d', ITEMS_PER_PAGE, offset);\n      \n      if (trendingData && trendingData.collections) {\n        setTrendingCollections(trendingData.collections);\n      }\n    } catch (err) {\n      console.error('Error fetching trending Monad collections:', err);\n    }\n  }, [ITEMS_PER_PAGE]);\n\n  const searchCollections = useCallback(async (query, page = 1) => {\n    if (!query.trim()) {\n      setIsSearchMode(false);\n      fetchCollections(1);\n      return;\n    }\n\n    setSearchLoading(true);\n    setIsSearchMode(true);\n    setError(null);\n    \n    try {\n      const offset = (page - 1) * ITEMS_PER_PAGE;\n      const searchData = await monadAPI.searchCollections(query, ITEMS_PER_PAGE, offset);\n      \n      if (searchData && searchData.collections && searchData.collections.length > 0) {\n        setCollections(searchData.collections);\n        setHasNextPage(!!searchData.continuation);\n        setHasPrevPage(page > 1);\n        setContinuation(searchData.continuation);\n        setCurrentPage(page);\n        setTotalPages(page + (searchData.continuation ? 10 : 0));\n      } else {\n        setCollections([]);\n        setError(`No collections found for \"${query}\"`);\n      }\n    } catch (err) {\n      console.error('Error searching Monad collections:', err);\n      setError('Search failed');\n      setCollections([]);\n    } finally {\n      setSearchLoading(false);\n    }\n  }, [ITEMS_PER_PAGE, fetchCollections]);\n\n  const fetchMonadData = useCallback(async () => {\n    try {\n      const [price, stats] = await Promise.all([\n        monadAPI.getMonPrice(),\n        monadNetworkAPI.getNetworkStats(selectedNetwork)\n      ]);\n      setMonPrice(price);\n      setNetworkStats(stats);\n    } catch (err) {\n      console.error('Error fetching Monad data:', err);\n    }\n  }, [selectedNetwork]);\n\n  const fetchUserPortfolio = useCallback(async (address) => {\n    if (!address) return;\n    \n    try {\n      const portfolio = await monadAPI.getUserCollections(address, 0, 20);\n      setUserPortfolio(portfolio);\n    } catch (err) {\n      console.error('Error fetching portfolio:', err);\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchCollections(1);\n    fetchTrendingCollections(1);\n    fetchMonadData();\n  }, [fetchCollections, fetchTrendingCollections, fetchMonadData]);\n\n  // Remove network dependency since we're using real Magic Eden data\n  // useEffect(() => {\n  //   if (isSearchMode && searchQuery) {\n  //     searchCollections(searchQuery, 1);\n  //   } else {\n  //     fetchCollections(1);\n  //   }\n  //   fetchTrendingCollections(1);\n  //   if (userAddress) {\n  //     fetchUserPortfolio(userAddress);\n  //   }\n  // }, [selectedNetwork]);\n\n  useEffect(() => {\n    if (userAddress) {\n      fetchUserPortfolio(userAddress);\n    }\n  }, [userAddress, fetchUserPortfolio]);\n\n  const refreshData = useCallback(() => {\n    if (isSearchMode && searchQuery) {\n      searchCollections(searchQuery, 1);\n    } else {\n      fetchCollections(1);\n    }\n    fetchTrendingCollections(1);\n    fetchMonadData();\n    if (userAddress) {\n      fetchUserPortfolio(userAddress);\n    }\n  }, [fetchCollections, fetchTrendingCollections, fetchMonadData, fetchUserPortfolio, userAddress, isSearchMode, searchQuery, searchCollections]);\n\n  const handlePageChange = useCallback((page) => {\n    if (isSearchMode && searchQuery) {\n      searchCollections(searchQuery, page);\n    } else {\n      fetchCollections(page);\n    }\n  }, [isSearchMode, searchQuery, searchCollections, fetchCollections]);\n\n  const handleSearch = useCallback((query) => {\n    setSearchQuery(query);\n    searchCollections(query, 1);\n  }, [searchCollections]);\n\n  const clearSearch = useCallback(() => {\n    setSearchQuery('');\n    setIsSearchMode(false);\n    fetchCollections(1);\n  }, [fetchCollections]);\n\n  return {\n    collections,\n    trendingCollections,\n    userPortfolio,\n    loading,\n    searchLoading,\n    error,\n    monPrice,\n    networkStats,\n    selectedNetwork,\n    lastUpdated,\n    currentPage,\n    totalPages,\n    hasNextPage,\n    hasPrevPage,\n    searchQuery,\n    isSearchMode,\n    refreshData,\n    setUserAddress,\n    setSelectedNetwork,\n    handlePageChange,\n    handleSearch,\n    clearSearch,\n    fetchTrendingCollections\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}