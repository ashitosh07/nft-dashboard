{"ast":null,"code":"const MAGIC_EDEN_API_KEY = process.env.REACT_APP_MAGIC_EDEN_API_KEY;\nconst MAGIC_EDEN_BASE_URL = 'https://api-mainnet.magiceden.dev/v3/rtp/ethereum';\n\n// Monad-related keywords for filtering collections\nconst MONAD_KEYWORDS = ['monad', 'mon', 'monks', 'portals', 'crystals', 'mechs', 'spirits', 'genesis', 'monadlabs', 'monadchain', 'monadnft', 'monadverse', 'monadeco'];\n\n// Real Magic Eden API service with Monad filtering\nexport const monadAPI = {\n  // Get real collections and filter for Monad ecosystem\n  async getCollections(limit = 20, offset = 0) {\n    try {\n      // Fetch more collections to have enough after filtering\n      const fetchLimit = Math.max(limit * 5, 100);\n      const response = await fetch(`${MAGIC_EDEN_BASE_URL}/collections/v7?includeMintStages=false&includeSecurityConfigs=false&normalizeRoyalties=false&useNonFlaggedFloorAsk=false&sortBy=allTimeVolume&limit=${fetchLimit}&offset=${offset}`, {\n        headers: {\n          'Authorization': `Bearer ${MAGIC_EDEN_API_KEY}`,\n          'accept': '*/*'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      const allCollections = this.formatCollections(data.collections || []);\n\n      // Filter for Monad-related collections\n      const monadCollections = this.filterMonadCollections(allCollections);\n\n      // Apply pagination to filtered results\n      const start = 0; // Already offset in API call\n      const end = limit;\n      const paginatedCollections = monadCollections.slice(start, end);\n      return {\n        collections: paginatedCollections,\n        continuation: monadCollections.length > end ? `${offset + limit}` : null\n      };\n    } catch (error) {\n      console.error('Magic Eden Collections API error:', error);\n      return {\n        collections: [],\n        continuation: null\n      };\n    }\n  },\n  // Search real collections for Monad-related ones\n  async searchCollections(query, limit = 20, offset = 0) {\n    try {\n      // First try direct search\n      const searchResponse = await fetch(`${MAGIC_EDEN_BASE_URL}/search/collections/v2?name=${encodeURIComponent(query)}&limit=${limit * 3}&offset=${offset}`, {\n        headers: {\n          'Authorization': `Bearer ${MAGIC_EDEN_API_KEY}`,\n          'accept': '*/*'\n        }\n      });\n      let searchResults = [];\n      if (searchResponse.ok) {\n        const searchData = await searchResponse.json();\n        searchResults = this.formatCollections(searchData.collections || []);\n      }\n\n      // Also search in general collections for Monad-related ones\n      const generalResponse = await fetch(`${MAGIC_EDEN_BASE_URL}/collections/v7?includeMintStages=false&includeSecurityConfigs=false&normalizeRoyalties=false&useNonFlaggedFloorAsk=false&sortBy=allTimeVolume&limit=100&offset=${offset}`, {\n        headers: {\n          'Authorization': `Bearer ${MAGIC_EDEN_API_KEY}`,\n          'accept': '*/*'\n        }\n      });\n      let generalResults = [];\n      if (generalResponse.ok) {\n        const generalData = await generalResponse.json();\n        generalResults = this.formatCollections(generalData.collections || []);\n      }\n\n      // Combine and filter results\n      const allResults = [...searchResults, ...generalResults];\n      const monadResults = this.filterMonadCollections(allResults, query);\n\n      // Remove duplicates\n      const uniqueResults = monadResults.filter((collection, index, self) => index === self.findIndex(c => c.id === collection.id));\n      const paginatedResults = uniqueResults.slice(0, limit);\n      return {\n        collections: paginatedResults,\n        continuation: uniqueResults.length > limit ? `${offset + limit}` : null\n      };\n    } catch (error) {\n      console.error('Magic Eden Search API error:', error);\n      return {\n        collections: [],\n        continuation: null\n      };\n    }\n  },\n  // Get trending collections and filter for Monad\n  async getTrendingCollections(period = '1d', limit = 20, offset = 0) {\n    try {\n      const response = await fetch(`${MAGIC_EDEN_BASE_URL}/collections/trending/v1?period=${period}&limit=${limit * 5}&offset=${offset}&sortBy=sales&normalizeRoyalties=false&useNonFlaggedFloorAsk=false`, {\n        headers: {\n          'Authorization': `Bearer ${MAGIC_EDEN_API_KEY}`,\n          'accept': '*/*'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      const allCollections = this.formatCollections(data.collections || []);\n      const monadCollections = this.filterMonadCollections(allCollections);\n      const paginatedCollections = monadCollections.slice(0, limit);\n      return {\n        collections: paginatedCollections,\n        continuation: monadCollections.length > limit ? `${offset + limit}` : null\n      };\n    } catch (error) {\n      console.error('Magic Eden Trending API error:', error);\n      return {\n        collections: [],\n        continuation: null\n      };\n    }\n  },\n  // Get user portfolio and filter for Monad collections\n  async getUserCollections(userAddress, offset = 0, limit = 20) {\n    try {\n      const response = await fetch(`${MAGIC_EDEN_BASE_URL}/users/${userAddress}/collections/v3?includeTopBid=false&includeLiquidCount=false&offset=${offset}&limit=${limit * 3}`, {\n        headers: {\n          'Authorization': `Bearer ${MAGIC_EDEN_API_KEY}`,\n          'accept': '*/*'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      const allCollections = this.formatUserCollections(data.collections || []);\n      const monadCollections = this.filterMonadCollections(allCollections);\n      return monadCollections.slice(0, limit);\n    } catch (error) {\n      console.error('Magic Eden User Collections API error:', error);\n      return [];\n    }\n  },\n  // Filter collections for Monad ecosystem\n  filterMonadCollections(collections, searchQuery = '') {\n    return collections.filter(collection => {\n      const name = (collection.name || '').toLowerCase();\n      const symbol = (collection.symbol || '').toLowerCase();\n      const description = (collection.description || '').toLowerCase();\n\n      // Check if collection name/symbol/description contains Monad keywords\n      const hasMonadKeyword = MONAD_KEYWORDS.some(keyword => name.includes(keyword) || symbol.includes(keyword) || description.includes(keyword));\n\n      // If there's a search query, also check if it matches\n      const matchesSearch = !searchQuery || name.includes(searchQuery.toLowerCase()) || symbol.includes(searchQuery.toLowerCase()) || description.includes(searchQuery.toLowerCase());\n      return hasMonadKeyword && matchesSearch;\n    });\n  },\n  // Format collections data for consistent structure\n  formatCollections(collections) {\n    return collections.map(collection => {\n      var _collection$sampleIma, _collection$floorAsk, _collection$floorAsk$, _collection$floorAsk$2, _collection$volume, _collection$volume2, _collection$volume3, _collection$floorSale, _collection$floorSale2, _collection$royalties, _collection$salesCoun, _collection$salesCoun2;\n      return {\n        id: collection.id,\n        name: collection.name || 'Unknown Collection',\n        symbol: collection.symbol || 'N/A',\n        image: collection.image || ((_collection$sampleIma = collection.sampleImages) === null || _collection$sampleIma === void 0 ? void 0 : _collection$sampleIma[0]) || 'https://via.placeholder.com/400x200/6366f1/ffffff?text=NFT',\n        floorPrice: ((_collection$floorAsk = collection.floorAsk) === null || _collection$floorAsk === void 0 ? void 0 : (_collection$floorAsk$ = _collection$floorAsk.price) === null || _collection$floorAsk$ === void 0 ? void 0 : (_collection$floorAsk$2 = _collection$floorAsk$.amount) === null || _collection$floorAsk$2 === void 0 ? void 0 : _collection$floorAsk$2.decimal) || 0,\n        volume24h: ((_collection$volume = collection.volume) === null || _collection$volume === void 0 ? void 0 : _collection$volume['1day']) || 0,\n        volume7d: ((_collection$volume2 = collection.volume) === null || _collection$volume2 === void 0 ? void 0 : _collection$volume2['7day']) || 0,\n        volumeAllTime: ((_collection$volume3 = collection.volume) === null || _collection$volume3 === void 0 ? void 0 : _collection$volume3.allTime) || 0,\n        owners: collection.ownerCount || 0,\n        totalSupply: collection.tokenCount || 0,\n        change24h: ((_collection$floorSale = collection.floorSaleChange) === null || _collection$floorSale === void 0 ? void 0 : _collection$floorSale['1day']) || 0,\n        change7d: ((_collection$floorSale2 = collection.floorSaleChange) === null || _collection$floorSale2 === void 0 ? void 0 : _collection$floorSale2['7day']) || 0,\n        description: collection.description || 'NFT Collection',\n        contractAddress: collection.primaryContract,\n        createdAt: collection.createdAt,\n        royalties: ((_collection$royalties = collection.royalties) === null || _collection$royalties === void 0 ? void 0 : _collection$royalties.bps) || 0,\n        sales24h: ((_collection$salesCoun = collection.salesCount) === null || _collection$salesCoun === void 0 ? void 0 : _collection$salesCoun['1day']) || 0,\n        sales7d: ((_collection$salesCoun2 = collection.salesCount) === null || _collection$salesCoun2 === void 0 ? void 0 : _collection$salesCoun2['7day']) || 0,\n        marketCap: collection.marketCap || 0,\n        verified: collection.isVerified || false\n      };\n    });\n  },\n  // Format user collections for portfolio view\n  formatUserCollections(collections) {\n    return collections.map(collection => ({\n      ...this.formatCollections([collection.collection])[0],\n      ownedCount: collection.tokenCount || 0,\n      floorValue: collection.floorAskValue || 0,\n      totalValue: collection.totalValue || 0\n    }));\n  },\n  // Get real ETH price (converted to MON for display)\n  async getMonPrice() {\n    try {\n      var _data$ethereum;\n      const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd');\n      const data = await response.json();\n      // Convert ETH price to simulated MON price (for display purposes)\n      const ethPrice = ((_data$ethereum = data.ethereum) === null || _data$ethereum === void 0 ? void 0 : _data$ethereum.usd) || 0;\n      return ethPrice * 0.005; // Simulate MON price as fraction of ETH\n    } catch (error) {\n      console.error('Price API error:', error);\n      return 12.50; // Fallback MON price\n    }\n  }\n};\n\n// Network stats (simulated for Monad)\nexport const monadNetworkAPI = {\n  async getNetworkStats(network = 'mainnet') {\n    // Since Monad is not live yet, simulate realistic network stats\n    return {\n      blockHeight: 1234567 + Math.floor(Date.now() / 1000),\n      tps: 10000 + Math.floor(Math.random() * 2000),\n      gasPrice: 0.001,\n      activeValidators: network === 'testnet' ? 50 : 100,\n      network\n    };\n  }\n};","map":{"version":3,"names":["MAGIC_EDEN_API_KEY","process","env","REACT_APP_MAGIC_EDEN_API_KEY","MAGIC_EDEN_BASE_URL","MONAD_KEYWORDS","monadAPI","getCollections","limit","offset","fetchLimit","Math","max","response","fetch","headers","ok","Error","status","data","json","allCollections","formatCollections","collections","monadCollections","filterMonadCollections","start","end","paginatedCollections","slice","continuation","length","error","console","searchCollections","query","searchResponse","encodeURIComponent","searchResults","searchData","generalResponse","generalResults","generalData","allResults","monadResults","uniqueResults","filter","collection","index","self","findIndex","c","id","paginatedResults","getTrendingCollections","period","getUserCollections","userAddress","formatUserCollections","searchQuery","name","toLowerCase","symbol","description","hasMonadKeyword","some","keyword","includes","matchesSearch","map","_collection$sampleIma","_collection$floorAsk","_collection$floorAsk$","_collection$floorAsk$2","_collection$volume","_collection$volume2","_collection$volume3","_collection$floorSale","_collection$floorSale2","_collection$royalties","_collection$salesCoun","_collection$salesCoun2","image","sampleImages","floorPrice","floorAsk","price","amount","decimal","volume24h","volume","volume7d","volumeAllTime","allTime","owners","ownerCount","totalSupply","tokenCount","change24h","floorSaleChange","change7d","contractAddress","primaryContract","createdAt","royalties","bps","sales24h","salesCount","sales7d","marketCap","verified","isVerified","ownedCount","floorValue","floorAskValue","totalValue","getMonPrice","_data$ethereum","ethPrice","ethereum","usd","monadNetworkAPI","getNetworkStats","network","blockHeight","floor","Date","now","tps","random","gasPrice","activeValidators"],"sources":["C:/Personal/nft-dashboard/src/services/apiService.js"],"sourcesContent":["const MAGIC_EDEN_API_KEY = process.env.REACT_APP_MAGIC_EDEN_API_KEY;\nconst MAGIC_EDEN_BASE_URL = 'https://api-mainnet.magiceden.dev/v3/rtp/ethereum';\n\n// Monad-related keywords for filtering collections\nconst MONAD_KEYWORDS = [\n  'monad', 'mon', 'monks', 'portals', 'crystals', 'mechs', 'spirits', 'genesis',\n  'monadlabs', 'monadchain', 'monadnft', 'monadverse', 'monadeco'\n];\n\n// Real Magic Eden API service with Monad filtering\nexport const monadAPI = {\n  // Get real collections and filter for Monad ecosystem\n  async getCollections(limit = 20, offset = 0) {\n    try {\n      // Fetch more collections to have enough after filtering\n      const fetchLimit = Math.max(limit * 5, 100);\n      \n      const response = await fetch(\n        `${MAGIC_EDEN_BASE_URL}/collections/v7?includeMintStages=false&includeSecurityConfigs=false&normalizeRoyalties=false&useNonFlaggedFloorAsk=false&sortBy=allTimeVolume&limit=${fetchLimit}&offset=${offset}`,\n        {\n          headers: {\n            'Authorization': `Bearer ${MAGIC_EDEN_API_KEY}`,\n            'accept': '*/*'\n          }\n        }\n      );\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      const allCollections = this.formatCollections(data.collections || []);\n      \n      // Filter for Monad-related collections\n      const monadCollections = this.filterMonadCollections(allCollections);\n      \n      // Apply pagination to filtered results\n      const start = 0; // Already offset in API call\n      const end = limit;\n      const paginatedCollections = monadCollections.slice(start, end);\n      \n      return {\n        collections: paginatedCollections,\n        continuation: monadCollections.length > end ? `${offset + limit}` : null\n      };\n    } catch (error) {\n      console.error('Magic Eden Collections API error:', error);\n      return { collections: [], continuation: null };\n    }\n  },\n\n  // Search real collections for Monad-related ones\n  async searchCollections(query, limit = 20, offset = 0) {\n    try {\n      // First try direct search\n      const searchResponse = await fetch(\n        `${MAGIC_EDEN_BASE_URL}/search/collections/v2?name=${encodeURIComponent(query)}&limit=${limit * 3}&offset=${offset}`,\n        {\n          headers: {\n            'Authorization': `Bearer ${MAGIC_EDEN_API_KEY}`,\n            'accept': '*/*'\n          }\n        }\n      );\n      \n      let searchResults = [];\n      if (searchResponse.ok) {\n        const searchData = await searchResponse.json();\n        searchResults = this.formatCollections(searchData.collections || []);\n      }\n      \n      // Also search in general collections for Monad-related ones\n      const generalResponse = await fetch(\n        `${MAGIC_EDEN_BASE_URL}/collections/v7?includeMintStages=false&includeSecurityConfigs=false&normalizeRoyalties=false&useNonFlaggedFloorAsk=false&sortBy=allTimeVolume&limit=100&offset=${offset}`,\n        {\n          headers: {\n            'Authorization': `Bearer ${MAGIC_EDEN_API_KEY}`,\n            'accept': '*/*'\n          }\n        }\n      );\n      \n      let generalResults = [];\n      if (generalResponse.ok) {\n        const generalData = await generalResponse.json();\n        generalResults = this.formatCollections(generalData.collections || []);\n      }\n      \n      // Combine and filter results\n      const allResults = [...searchResults, ...generalResults];\n      const monadResults = this.filterMonadCollections(allResults, query);\n      \n      // Remove duplicates\n      const uniqueResults = monadResults.filter((collection, index, self) => \n        index === self.findIndex(c => c.id === collection.id)\n      );\n      \n      const paginatedResults = uniqueResults.slice(0, limit);\n      \n      return {\n        collections: paginatedResults,\n        continuation: uniqueResults.length > limit ? `${offset + limit}` : null\n      };\n    } catch (error) {\n      console.error('Magic Eden Search API error:', error);\n      return { collections: [], continuation: null };\n    }\n  },\n\n  // Get trending collections and filter for Monad\n  async getTrendingCollections(period = '1d', limit = 20, offset = 0) {\n    try {\n      const response = await fetch(\n        `${MAGIC_EDEN_BASE_URL}/collections/trending/v1?period=${period}&limit=${limit * 5}&offset=${offset}&sortBy=sales&normalizeRoyalties=false&useNonFlaggedFloorAsk=false`,\n        {\n          headers: {\n            'Authorization': `Bearer ${MAGIC_EDEN_API_KEY}`,\n            'accept': '*/*'\n          }\n        }\n      );\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      const allCollections = this.formatCollections(data.collections || []);\n      const monadCollections = this.filterMonadCollections(allCollections);\n      const paginatedCollections = monadCollections.slice(0, limit);\n      \n      return {\n        collections: paginatedCollections,\n        continuation: monadCollections.length > limit ? `${offset + limit}` : null\n      };\n    } catch (error) {\n      console.error('Magic Eden Trending API error:', error);\n      return { collections: [], continuation: null };\n    }\n  },\n\n  // Get user portfolio and filter for Monad collections\n  async getUserCollections(userAddress, offset = 0, limit = 20) {\n    try {\n      const response = await fetch(\n        `${MAGIC_EDEN_BASE_URL}/users/${userAddress}/collections/v3?includeTopBid=false&includeLiquidCount=false&offset=${offset}&limit=${limit * 3}`,\n        {\n          headers: {\n            'Authorization': `Bearer ${MAGIC_EDEN_API_KEY}`,\n            'accept': '*/*'\n          }\n        }\n      );\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      const allCollections = this.formatUserCollections(data.collections || []);\n      const monadCollections = this.filterMonadCollections(allCollections);\n      \n      return monadCollections.slice(0, limit);\n    } catch (error) {\n      console.error('Magic Eden User Collections API error:', error);\n      return [];\n    }\n  },\n\n  // Filter collections for Monad ecosystem\n  filterMonadCollections(collections, searchQuery = '') {\n    return collections.filter(collection => {\n      const name = (collection.name || '').toLowerCase();\n      const symbol = (collection.symbol || '').toLowerCase();\n      const description = (collection.description || '').toLowerCase();\n      \n      // Check if collection name/symbol/description contains Monad keywords\n      const hasMonadKeyword = MONAD_KEYWORDS.some(keyword => \n        name.includes(keyword) || \n        symbol.includes(keyword) || \n        description.includes(keyword)\n      );\n      \n      // If there's a search query, also check if it matches\n      const matchesSearch = !searchQuery || \n        name.includes(searchQuery.toLowerCase()) || \n        symbol.includes(searchQuery.toLowerCase()) ||\n        description.includes(searchQuery.toLowerCase());\n      \n      return hasMonadKeyword && matchesSearch;\n    });\n  },\n\n  // Format collections data for consistent structure\n  formatCollections(collections) {\n    return collections.map(collection => ({\n      id: collection.id,\n      name: collection.name || 'Unknown Collection',\n      symbol: collection.symbol || 'N/A',\n      image: collection.image || collection.sampleImages?.[0] || 'https://via.placeholder.com/400x200/6366f1/ffffff?text=NFT',\n      floorPrice: collection.floorAsk?.price?.amount?.decimal || 0,\n      volume24h: collection.volume?.['1day'] || 0,\n      volume7d: collection.volume?.['7day'] || 0,\n      volumeAllTime: collection.volume?.allTime || 0,\n      owners: collection.ownerCount || 0,\n      totalSupply: collection.tokenCount || 0,\n      change24h: collection.floorSaleChange?.['1day'] || 0,\n      change7d: collection.floorSaleChange?.['7day'] || 0,\n      description: collection.description || 'NFT Collection',\n      contractAddress: collection.primaryContract,\n      createdAt: collection.createdAt,\n      royalties: collection.royalties?.bps || 0,\n      sales24h: collection.salesCount?.['1day'] || 0,\n      sales7d: collection.salesCount?.['7day'] || 0,\n      marketCap: collection.marketCap || 0,\n      verified: collection.isVerified || false\n    }));\n  },\n\n  // Format user collections for portfolio view\n  formatUserCollections(collections) {\n    return collections.map(collection => ({\n      ...this.formatCollections([collection.collection])[0],\n      ownedCount: collection.tokenCount || 0,\n      floorValue: collection.floorAskValue || 0,\n      totalValue: collection.totalValue || 0\n    }));\n  },\n\n  // Get real ETH price (converted to MON for display)\n  async getMonPrice() {\n    try {\n      const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd');\n      const data = await response.json();\n      // Convert ETH price to simulated MON price (for display purposes)\n      const ethPrice = data.ethereum?.usd || 0;\n      return ethPrice * 0.005; // Simulate MON price as fraction of ETH\n    } catch (error) {\n      console.error('Price API error:', error);\n      return 12.50; // Fallback MON price\n    }\n  }\n};\n\n// Network stats (simulated for Monad)\nexport const monadNetworkAPI = {\n  async getNetworkStats(network = 'mainnet') {\n    // Since Monad is not live yet, simulate realistic network stats\n    return {\n      blockHeight: 1234567 + Math.floor(Date.now() / 1000),\n      tps: 10000 + Math.floor(Math.random() * 2000),\n      gasPrice: 0.001,\n      activeValidators: network === 'testnet' ? 50 : 100,\n      network\n    };\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}